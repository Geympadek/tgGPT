import asyncio

import g4f.models
from g4f.client import AsyncClient, Client
from aiolimiter import AsyncLimiter
from g4f import Provider

import config
from loader import database
from time import time

import utils

import aiohttp

client = AsyncClient(
    provider=Provider.Blackbox
)

rate_limit = AsyncLimiter(max_rate=1, time_period=1)  # 10 requests per second

async def describe_img(img_link: str) -> str:
    data = {
        "imageUrl": img_link,
        "prompt": "Create detailed descriptions, include all visible elements present. If it has any text quote it as well. If this text is in foreign language quote the original text too."
    }

    url = "https://pallyy.com/api/tools/image-to-description/get"

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            return (await response.json())['description']

async def shorten_text(text: str) -> str:
    messages = [
        {"role": "system", "content": "You are an AI that shortens texts. User will send you a text, and you will respond with nothing but a shorter version of it. Do not engage with User and just do your job. Don't hallucinate."},
        {"role": "user", "content": f"Shorten the following text: <text>{text}</text>"}
    ]
    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    result = response.choices[0].message.content
    return result

async def push_image(user_id: int, role: str, url: str):
    description = await describe_img(url)
    
    content = f"User sent an image. Here's an automatically generated description: <image>{description}</image>"
    push_message(user_id, role, content)

def push_reaction(user_id: int, role: str, emoji: str):
    content = f"<tg-reaction>{emoji}</tg-reaction>"
    push_message(user_id, role, content)

def push_website_response(user_id: int, role: str, response: str):
    content = f"<website-response>{response}</website-response>"
    push_message(user_id, role, content)

def push_search_response(user_id: int, role: str, response: str):
    content = f"<search-response>{response}</search-response>"
    push_message(user_id, role, content)

def push_message(user_id: int, role: str, content: str):
    """
    Creates a new message entry in the database
    """
    database.create("messages", {
        "role": role,
        "user_id": user_id,
        "content": content,
        "date": time()
    })

    update_messages(user_id)

def trim_messages(user_id: int):
    while True:
        messages = database.read("messages", {"user_id": user_id})

        token_count = count_list_tokens(messages)
        print(token_count)
        if token_count < config.TOKEN_LIMIT:
            break

        oldest = last_msg(messages)
        database.delete("messages", {"id": oldest["id"]})

def clear_history(user_id: int):
    database.delete("messages", filters={"user_id": user_id})

def update_messages(user_id: int):
    """
    Makes sure that the model doesn't take in too much data.
    """
    trim_messages(user_id)

def count_tokens(message: dict):
    return utils.count_tokens(message["content"]) + 2

def count_list_tokens(messages: list[dict]):
    return sum(count_tokens(message) for message in messages)

def last_msg(messages: list[dict]):
    return min(messages, key=lambda msg: msg["date"])

def get_system_prompt(prefs: dict):
    prompt = f"""

You are a language model (LLM), specifically model {prefs["model"]}, designed to assist users in a messaging platform called Telegram. Your main goal is to help users with their tasks effectively.

**Image Descriptions**: 
You can interpret images through descriptions generated by an AI. These descriptions will be provided within `<image></image>` tags, and you should act as if you can see the images directly.

**Tg-Reactions**: 
Telegram allows users to express emotions through tg-reactions. For instance, if a user shares a picture of their cat, another user might send a tg-reaction to show your affection. 
To send a tg-reaction, use the format: `<tg-reaction>üî•</tg-reaction>`.

- **Usage**: 
  - Tg-reactions can replace full messages. For example, if a user says "Thank you," you can respond with a heart emoji instead of a full message.
  - You can combine tg-reactions with text messages.

- **Allowed Reactions**: 
  You can use the following emojis for tg-reactions: <allowed-reactions>{config.ALLOWED_REACTIONS}</allowed-reactions>. Using any other emoji will be automatically replaced by `<tg-reaction>‚ù§</tg-reaction>`.

**Important note**: 
- To send a text message, use the format: `<message></message>`. Anything outside of this tag will not be usable by the user, unless it's a different tag mentioned in the text. Please, don't forget to use tag <message>. Without it the user won't be able to see text response. If you choose not to respond, you can leave this tag empty.

**Code**
- If you want to send code use tag `<message>``` ```</message>` as well.

**Table Generation**: 
To create a table, use Markdown format within `<table></table>`. This will be interpreted correctly only if the `<table>` tag is outside of other tags.

**Website Requests**: 
You can request the server to load a website for fact-checking or to obtain updated information. Use the format: `<website-request>URL</website-request>`. The server will return the content in `<website-response></website-response>` tags.
If the loaded page didn't provide the required information, you can request to load a different website, using same format.

**Website Searching**:
Before accessing a requesting a website it's recommended to first search for them. You can do this through `<search-query>Query</search-query>` tags. The server will return a list of links to websites in `<search-response></search-response>` tags.
"""
    if prefs.get("system_prompt") is not None:
        prompt += f"""
The user also stated their own communication preferences: 
<user_prompt>
{prefs["system_prompt"]}
</user_prompt>
"""
    return prompt

async def get_response(user_id: int) -> str:
    """
    Returns the full response from the model asynchronously
    """
    prefs = database.read("prefs", {"user_id": user_id})[0]

    history = [{"role": "system", "content": get_system_prompt(prefs)}]
    history.extend(get_sample_history())
    history.extend(get_history(user_id))

    for retry in range(10):
        async with rate_limit:
            response = await client.chat.completions.create(
                model=prefs["model"],
                messages=history
            )
            content: str = response.choices[0].message.content
            if content.strip() != "":
                break
            print(f"Unable to get response from the model. Retry {retry + 1}")
        
    return content

def get_sample_history():
    return [{"role": "user", "content": "<message>–ü—Ä–∏–≤–µ—Ç!</message>"},
            {"role": "assistant", "content": "<message>–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?</message>"},
            {"role": "user", "content": "<message>–ú–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –±—É–¥–µ—Ç \"–Ø–ü\", –∞ –≤–æ –≤—Ç–æ—Ä–æ–π \"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\"?</message>"},
            {"role": "assistant", "content": """<tg-reaction>ü§ù</tg-reaction>
<message>–ö–æ–Ω–µ—á–Ω–æ!</message>
<table>
| –Ø–ü         | –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ                     |
|------------|--------------------------------|
| Python     | –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö  |
| Java       | –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, Android |
| JavaScript | –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã |
| C++        | –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–≥—Ä—ã |
| Ruby       | –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è   |
</table>"""},
            {"role": "user", "content": """<message>–ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞ –ø–µ—Å–Ω–∏ "Smells like teen spirit" –≥—Ä—É–ø–ø—ã "Nirvana"?</message>"""},
            {"role": "assistant", "content": "<message>–°–µ–π—á–∞—Å!</message><search-query>Smells like teen spirit lyrics Nirvana</search-query>"},
            {"role": "user", "content": """
<search-response><ul><li>
	<title>Nirvana - Smells Like Teen Spirit Lyrics - Genius</title>
	<href>genius.com/Nirvana-smells-like-teen-spirit-lyrics</href>
</li>
<li>
	<title>Nirvana - Smells Like Teen Spirit Lyrics | AZLyrics.com</title>
	<href>www.azlyrics.com/lyrics/nirvana/smellsliketeenspirit.html</href>
</li>
<li>
	<title>Smells Like Teen Spirit - Lyrics.com</title>
	<href>www.lyrics.com/lyric/24156833/Nirvana/Smells+Like+Teen+Spirit</href>
</li>
<li>
	<title>Smells Like Teen Spirit Lyrics - Lyrics On Demand</title>
	<href>www.lyricsondemand.com/nirvana/smells_like_teen_spirit</href>
</li>
<li>
	<title>Nirvana - Smells Like Teen Spirit (2021 Remaster) Lyrics - Genius</title>
	<href>genius.com/Nirvana-smells-like-teen-spirit-2021-remaster-lyrics</href>
</li>
</ul></search-response>
"""},
            {"role": "assistant", "content": """<message>–ò—â—É —Å–ª–æ–≤–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ!</message><website-request>https://www.azlyrics.com/lyrics/nirvana/smellsliketeenspirit.html</website-request>"""},
            {"role": "user", "content": 
"""
<website-response>
<h1>"Smells Like Teen Spirit" lyrics</h1>
<h2><a href="//www.azlyrics.com/n/nirvana.html">Nirvana Lyrics</a></h2>
                     Follow Nirvana                     on Bandsintown                  
"Smells Like Teen Spirit"<br/>
<br/>
Load up on guns, bring your friends<br/>
It's fun to lose and to pretend<br/>
She's over-bored and self-assured<br/>
Oh no, I know a dirty word<br/>
<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello<br/>
<br/>
With the lights out, it's less dangerous<br/>
Here we are now, entertain us<br/>
I feel stupid and contagious<br/>
Here we are now, entertain us<br/>
A mulatto, an albino<br/>
A mosquito, my libido<br/>
<br/>
Yeah, hey, yay<br/>
<br/>
I'm worse at what I do best<br/>
And for this gift, I feel blessed<br/>
Our little group has always been<br/>
And always will until the end<br/>
<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello<br/>
<br/>
With the lights out, it's less dangerous<br/>
Here we are now, entertain us<br/>
I feel stupid and contagious<br/>
Here we are now, entertain us<br/>
A mulatto, an albino<br/>
A mosquito, my libido<br/>
<br/>
Yeah, hey, yay<br/>
<br/>
And I forget just why I taste<br/>
Oh yeah, I guess it makes me smile<br/>
I found it hard, it's hard to find<br/>
Oh well, whatever, never mind<br/>
<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello, how low<br/>
Hello, hello, hello<br/>
<br/>
With the lights out, it's less dangerous<br/>
Here we are now, entertain us<br/>
I feel stupid and contagious<br/>
Here we are now, entertain us<br/>
A mulatto, an albino<br/>
A mosquito, my libido<br/>
<br/>
A denial, a denial<br/>
A denial, a denial<br/>
A denial, a denial<br/>
A denial, a denial<br/>
A denial
<br/><br/>
<br/><br/>
</website-response>"""},
            {"role": "assistant", "content": """<message>
–í–æ—Ç —Å–ª–æ–≤–∞ –ø–µ—Å–Ω–∏ "Smells Like Teen Spirit" –≥—Ä—É–ø–ø—ã "Nirvana":

Load up on guns, bring your friends
It's fun to lose and to pretend
She's over-bored and self-assured
Oh no, I know a dirty word

Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello

With the lights out, it's less dangerous
Here we are now, entertain us
I feel stupid and contagious
Here we are now, entertain us
A mulatto, an albino
A mosquito, my libido

Yeah, hey, yay

I'm worse at what I do best
And for this gift, I feel blessed
Our little group has always been
And always will until the end

Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello

With the lights out, it's less dangerous
Here we are now, entertain us
I feel stupid and contagious
Here we are now, entertain us
A mulatto, an albino
A mosquito, my libido

Yeah, hey, yay

And I forget just why I taste
Oh yeah, I guess it makes me smile
I found it hard, it's hard to find
Oh well, whatever, never mind

Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello, how low
Hello, hello, hello

With the lights out, it's less dangerous
Here we are now, entertain us
I feel stupid and contagious
Here we are now, entertain us
A mulatto, an albino
A mosquito, my libido

A denial, a denial
A denial, a denial
A denial, a denial
A denial, a denial
A denial
     
–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!
</message>"""},
            {"role": "user", "content": "<tg-reaction>‚ù§</tg-reaction>"},
            {"role": "user", "content": "<message>–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!</message>"},
            {"role": "assistant", "content": "<tg-reaction>üòá</tg-reaction><message>–ù–µ –∑–∞ —á—Ç–æ!</message>"},
            {"role": "user", "content": "<message>–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ Python –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ?</message>"},
            {"role": "assistant", "content": """<tg-reaction>üëç</tg-reaction>
<message>–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:</message>
<message>```
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª
def multiply_numbers(num1, num2):
    return num1 * num2

# –í–≤–æ–¥ —á–∏—Å–µ–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
number1 = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
number2 = float(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))

# –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
result = multiply_numbers(number1, number2)
print(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {number1} –∏ {number2} —Ä–∞–≤–Ω–æ {result}.")
```</message>

<message>–°–∫–æ–ø–∏—Ä—É–π –∏ –∑–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Å–≤–æ–µ–º Python –æ–∫—Ä—É–∂–µ–Ω–∏–∏!</message>
"""},
            {"role": "user", "content": "<tg-reaction>‚ù§</tg-reaction>"},
            {"role": "user", "content": "<message>–Ø –∫—É–ø–∏–ª –Ω–µ–¥–∞–≤–Ω–æ –ø–ª–µ–¥, —Ö–æ—Ç–µ–ª–æ—Å—å –≤—Å–µ–≥–¥–∞ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω–æ.</message>"},
            {"role": "user", "content": "User sent an image. Here's an automatically generated description: <image>The image features a bag of food prominently displayed indoors. The bag appears to be tan or khaki in color, aligning with the earthy tones typically associated with such materials. On the bag, there is text that reads \"Guten MORGEN,\" which is German for \"Good Morning.\" The setting suggests a casual atmosphere, possibly indicating it is meant for breakfast or a light meal. Overall, the composition highlights both the food item and its welcoming message.</image>"},
            {"role": "assistant", "content": """–ù–∞ –ø–ª–µ–¥–µ –Ω–∞–ø–∏—Å–∞–Ω–æ "Guten MORGEN", —á—Ç–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º –æ–∑–Ω–∞—á–∞–µ—Ç "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"."""}
    ]
    pass

def get_history(user_id: int):
    message_entries = database.read(
        "messages",
        filters={"user_id": user_id}
    )
    messages = [{"role": entry["role"], "content": entry["content"]} for entry in message_entries]

    return messages

async def main():
    # print(tag_content("<reaction>üëç</reaction>", "reaction"))
    # print(await get_response(1565642212))
    push_message(23, "user", "fu")
    ...

if __name__ == "__main__":
    asyncio.run(main())